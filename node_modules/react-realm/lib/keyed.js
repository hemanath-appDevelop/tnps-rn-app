'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * In Elm, all application updates come from the root -- the components/views
                                                                                                                                                                                                                                                                   * themselves are stateless and pure. In a React app, this isn't necessarily
                                                                                                                                                                                                                                                                   * true, and often isn't. Any React component can update itself using state. In
                                                                                                                                                                                                                                                                   * order to interoperate with stateful React components, such as a Relay
                                                                                                                                                                                                                                                                   * container, we need a way to synchrononize external state with our Realm
                                                                                                                                                                                                                                                                   * model. `keyed` does this by dispatching special actions on mount and unmount.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * When using a keyed component, rather than storing a single copy of the
                                                                                                                                                                                                                                                                   * component's model, you keep a collection of models, stashed by key. On mount,
                                                                                                                                                                                                                                                                   * `keyed` dispatches a special action that adds a model instance to the
                                                                                                                                                                                                                                                                   * collection. Updates received from that component will update that specific
                                                                                                                                                                                                                                                                   * model instance. Then, when the component unmounts, the model is removed from
                                                                                                                                                                                                                                                                   * the collection.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * (To be extra clear: `keyed` is not necesssary if the data for a view can be
                                                                                                                                                                                                                                                                   * derived entirely from the model; it's only needed for cases where the output
                                                                                                                                                                                                                                                                   * of a view depends on data that is external to our model.)
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * We ensure that a component is unmounted properly using the component keys,
                                                                                                                                                                                                                                                                   * an existing feature of React that is usually used to identify React elements
                                                                                                                                                                                                                                                                   * in a list across render cycles. Because element keys are not available on the
                                                                                                                                                                                                                                                                   * props object (as might be expected), we also specify a `realmKey` prop with
                                                                                                                                                                                                                                                                   * the same value.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * It's a bit hacky, but it's a necessary concession for React interop.
                                                                                                                                                                                                                                                                   */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BASE_DISPATCH = 'BASE_DISPATCH';

var WILL_MOUNT = 'WILL_MOUNT';
var WILL_UNMOUNT = 'WILL_UNMOUNT';

var keyed = function keyed(Base) {
  var META_DISPATCH = 'META_DISPATCH' + Math.random().toString(36).substr(2, 9);

  var init = function init() {
    return {};
  };

  var update = function update(model, metaAction) {
    if (metaAction.type !== META_DISPATCH) return model;
    var _metaAction$payload = metaAction.payload;
    var action = _metaAction$payload.action;
    var key = _metaAction$payload.key;

    switch (action.type) {
      case WILL_MOUNT:
        var initialModel = action.payload;
        return _extends({}, model, _defineProperty({}, key, initialModel));
      case BASE_DISPATCH:
        var baseComponentAction = action.payload;
        return _extends({}, model, _defineProperty({}, key, Base.update(model[key], baseComponentAction)));
      case WILL_UNMOUNT:
        var newModel = _extends({}, model);
        delete newModel[key];
        return newModel;
      default:
        return model;
    }
  };

  var view = (function (_Component) {
    _inherits(Keyed, _Component);

    function Keyed(props) {
      _classCallCheck(this, Keyed);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Keyed).call(this, props));

      _this.baseDispatch = function (action) {
        return _this.metaDispatch({
          type: BASE_DISPATCH,
          payload: action
        });
      };

      return _this;
    }

    _createClass(Keyed, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        var _props = this.props;
        var model = _props.model;
        var initProp = _props.init;
        var realmKey = _props.realmKey;

        if (!model.hasOwnProperty(realmKey)) {
          this.metaDispatch({
            type: WILL_MOUNT,
            payload: initProp()
          });
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        var _props2 = this.props;
        var model = _props2.model;
        var realmKey = _props2.realmKey;

        if (model.hasOwnProperty(realmKey)) {
          this.metaDispatch({
            type: WILL_UNMOUNT
          });
        }
      }
    }, {
      key: 'metaDispatch',
      value: function metaDispatch(action) {
        if (!this.props.realmKey) {
          throw new Error('keyed(): prop `realmKey` is required.');
        }

        this.props.dispatch({
          type: META_DISPATCH,
          payload: {
            key: this.props.realmKey,
            action: action
          }
        });
      }
    }, {
      key: 'render',
      value: function render() {
        var _props3 = this.props;
        var model = _props3.model;
        var realmKey = _props3.realmKey;

        if (!model.hasOwnProperty(realmKey)) return null;
        return _react2.default.createElement(Base.view, _extends({}, this.props, {
          dispatch: this.baseDispatch,
          model: model[realmKey]
        }));
      }
    }]);

    return Keyed;
  })(_react.Component);

  return { init: init, update: update, view: view };
};

exports.default = keyed;