'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _wrapDisplayName = require('recompose/wrapDisplayName');

var _wrapDisplayName2 = _interopRequireDefault(_wrapDisplayName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var start = function start(_ref) {
  var initialModel = _ref.model;
  var View = _ref.view;
  var update = _ref.update;

  var Start = (function (_Component) {
    _inherits(Start, _Component);

    function Start(props) {
      _classCallCheck(this, Start);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Start).call(this, props));

      _this.state = { model: initialModel };

      _this.dispatch = function (action) {
        return _this.setState(function (_ref2) {
          var model = _ref2.model;
          return {
            model: update(model, action)
          };
        });
      };

      return _this;
    }

    _createClass(Start, [{
      key: 'render',
      value: function render() {
        return _react2.default.createElement(View, _extends({
          dispatch: this.dispatch,
          model: this.state.model
        }, this.props));
      }
    }]);

    return Start;
  })(_react.Component);

  Start.displayName = (0, _wrapDisplayName2.default)(View, 'start');

  return Start;
};

exports.default = start;